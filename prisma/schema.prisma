generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  attendances Attendance[]
  user        User         @relation(fields: [userId], references: [id])
  students    Student[]
  grades      Grade[]

  @@map("class")
}

model Student {
  id         String       @id @default(cuid())
  name       String
  nis        String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  classId    String
  gender     Gender       @default(MALE)
  attendance Attendance[]
  grade      Grade[]
  class      Class        @relation(fields: [classId], references: [id])

  @@map("students")
}

model Attendance {
  id        String           @id @default(cuid())
  status    AttendanceStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  studentId String
  classId   String
  date      DateTime         @db.Date
  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("attendances")
}

model Grade {
  id             String         @id @default(cuid())
  score          Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studentId      String
  date           DateTime       @db.Date
  assessmentType AssessmentType
  student        Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class          Class          @relation(fields: [classId], references: [id])
  classId        String

  @@unique([studentId, date])
  @@map("grades")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  classes       Class[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum AttendanceStatus {
  HADIR
  SAKIT
  IZIN
  ALFA
}

enum AssessmentType {
  TUGAS
  ULANGAN_HARIAN
  UTS
  UAS
}

enum Gender {
  MALE
  FEMALE
}
